Full Technical Specification for Automation Framework
🔧 Objective:
Update the recent project  to full project Java Maven-based automation framework to test the End-to-End (E2E) booking and payment flow for a web-based system. The framework should:
Test multiple payment gateways (Stripe, Paymob, Fawry)


Support 3 environments (Staging, Alpha, Production)


Be suitable for CI/CD Integration (e.g., via GitHub Actions)


Allow test execution per environment or per gateway


Generate clear HTML reports and optionally integrate with Slack



📁 Project Structure:
pgsql
CopyEdit
booking-automation-framework/
├── pom.xml
├── testng.xml
├── README.md
├── src/
│   ├── main/
│   │   └── resources/
│   │       ├── config/
│   │       │   ├── staging.properties
│   │       │   ├── alpha.properties
│   │       │   └── production.properties
│   │       ├── testdata/
│   │       │   └── stripe_test_card.json
│   │       └── log4j2.xml
│   └── test/
│       └── java/
│           └── com.example.booking/
│               ├── api/
│               │   ├── ApiClient.java
│               │   ├── endpoints/
│               │   ├── pojos/
│               ├── ui/
│               │   ├── DriverManager.java
│               │   └── pages/
│               ├── tests/
│               │   ├── BaseTest.java
│               │   └── E2E_Booking_Test.java
│               └── utils/
│                   ├── ConfigManager.java
│                   ├── ExtentManager.java
│                   ├── JsonUtil.java
│                   └── TestListener.java


🌐 Environments
You must support:
staging


alpha


production


Each environment has its own config.properties file with:
properties
CopyEdit
base.url=
therapist.token=
client.token=
operator.token=
gateway.id.stripe=
gateway.id.paymob=
gateway.id.fawry=


💳 Gateways to Cover
✅ Supported:
Stripe


Paymob


Fawry


❌ Wallet is removed from scope

🔄 Booking Flow – (Flow Magic)
Get Free Slots API → returns:


tSlotDate


tSlotTime


serviceId


Get Timeslot Details API using above → returns:


✅ timeslotId


Reservation API


Send timeslotId and gatewayId


Response always includes:


orderId


For Fawry: referenceNumber


For others: redirectToUrl



🧪 Test Case Matrix
✅ Group A (Gateways without Coupon)
test_gatewayWithoutCoupon


Sends gatewayId only in reservation API


UI test for payment


Then:


Validate API → Check operator with orderId + today's date



🎟️ Group B (Coupon Use Cases)
test_gatewayWithPartialCoupon


Uses coupon + gateway (e.g., 50% discount)


Reservation API includes couponCode


UI flow proceeds as normal


test_100%Coupon


gatewayId = null + couponCode = valid_100_percent


Skips UI redirect step


No validate/cron needed


Direct check via operator API using orderId


❌ Removed:
test_gatewayWithPartialWallet


test_gatewayWithPartialWalletAndCoupon



💡 Special Gateway Notes
Fawry
Same reservation API with Fawry gatewayId


Response includes referenceNumber


UI Payment is on a static Fawry URL (no redirect)


After payment:


Either Validate API or simulate cron


Final check via Operator API using orderId



📦 Reporting
Use ExtentReports


Enable logging for requests/responses (RestAssured filters)


Catch and log any API failures using try/catch


Print statusCode and responseBody on failure



⚙️ CI/CD Integration
Use GitHub Actions


Trigger based on target branch:


staging → run tests with -Denv=staging


alpha → run with -Denv=alpha


main or production → run with -Denv=production


Use testng.xml to organize and run grouped tests


Export report as artifact + optionally send summary to Slack



🔁 Validation Logic
Each payment flow ends with:
Call validateTransaction(orderId)


OR call cronSimulationAPI(orderId) (acts as fallback)


Final confirmation via operator/orders endpoint using:


orderId


current date



🔒 Error Handling
Every API call must wrap in try/catch


Log:


statusCode


responseBody


Any exception stack trace



📩 Slack Integration 
Send summary report (pass/fail per environment) to a configured Slack channel

